package com.example.cve202324998.controller;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.context.WebApplicationContext;

import java.nio.file.Files;
import java.nio.file.Paths;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.multipart;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
public class FileUploadControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    public void fileUpload() throws Exception {
        MockMultipartFile file = new MockMultipartFile("fileData",
            "image.png",
            "image/png",
            Files.newInputStream(Paths.get("src", "test", "resources", "/image.png")));

        MultiValueMap<String, String> textData = new LinkedMultiValueMap<>();
        for (int i = 0; i < 100000; i++) {
            textData.add("textData", "textData" + i);
        }

        MockMultipartHttpServletRequestBuilder builder = multipart("/fileUpload");

        builder.file(file)
            .file(file)
            .file(file)
            .file(file)
            .file(file)
            .file(file)
            .file(file)
            .file(file)
            .file(file)
            .file(file)
            .params(textData);

        mockMvc.perform(builder)
            .andExpect(status().isOk());
    }
}